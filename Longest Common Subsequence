#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int max(int a, int b)
{
    return (a > b)? a : b;
}
  
void lcs( int X[], int Y[], int m, int n )
{
    int i, j;
  /*  for(i=0;i<n;i++)
printf("%d",X[i]);
    printf("\n");
for(i=0;i<m;i++)
printf("%d",Y[i]);*/

   int L[m+1][n+1];
   
  
   /* Following steps build L[m+1][n+1] in bottom up fashion. Note 
      that L[i][j] contains length of LCS of X[0..i-1] and Y[0..j-1] */
   for (i=0; i<=m; i++)
   {
     for (j=0; j<=n; j++)
     {
       if (i == 0 || j == 0)
         L[i][j] = 0;
  
       else if (X[i-1] == Y[j-1])
         L[i][j] = L[i-1][j-1] + 1;
  
       else
         L[i][j] = max(L[i-1][j], L[i][j-1]);
     }
   }
    int index=L[m][n];
    
int p=index-1;
int lcss[index];
    i=n;j=m;
//printf("index%d p%d lcss[index]%d i%d j%d",index,p,lcss[index],i,j);
while(p>=0){
    if(X[i-1]==Y[j-1]){
        lcss[p]=X[i-1];
        i--;
        j--;
        p--; 
    }
    else if(L[i-1][j]>L[i][j-1]){
        i--;
    }
    else{
        j--;
    }



}
    for(int k=0;k<index;k++){
        printf("%d ",lcss[k]);
    }
   /* L[m][n] contains length of LCS for X[0..n-1] and Y[0..m-1] */
  // return L[m][n];
}
int main()
    {
int m,n,i;
  
   scanf("%d %d",&n,&m);
 int P[m],T[n];

for(i=0;i<n;i++)
scanf("%d",&T[i]);
for(i=0;i<m;i++)
scanf("%d",&P[i]);




 /*char *T = "ABABDABACDABABCABAB";
   char *P = "ABABCABAB";*/
lcs(T,P,m,n); 
//printf("%d",l);
return 0;
    	
}
