#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int CeilIndex(int v[], int l, int r, int key) {
    while (r-l > 1) {
    int m = l + (r-l)/2;
    if (v[m] >= key)
        r = m;
    else
        l = m;
    }
 
    return r;
}
int LIS(int v[],int m)
    {
      
 
    int tail[m];
    int length = 1; // always points empty slot in tail
 
    tail[0] = v[0];
    for (size_t i = 1; i < m; i++) {
        if (v[i] < tail[0])
            // new smallest value
            tail[0] = v[i];
        else if (v[i] > tail[length-1])
            // v[i] extends largest subsequence
            tail[length++] = v[i];
        else
            // v[i] will become end candidate of an existing subsequence or
            // Throw away larger elements in all LIS, to make room for upcoming grater elements than v[i]
            // (and also, v[i] would have already appeared in one of LIS, identify the location and replace it)
            tail[CeilIndex(tail, -1, length-1, v[i])] = v[i];
    }
 
    return length;
}



int main() {
int n,i;
    scanf("%d",&n);
   int arr[n];
    for(i=0;i<n;i++)
        scanf("%d",&arr[i]);
    int l=LIS(arr,n);
    printf("%d",l);
    return 0;
}
